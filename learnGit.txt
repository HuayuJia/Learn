/**A GitHub learn txt

*Author: JiaHuayu

*/

*1、创建版本库

//（1）选择一个目录learnGit，pwd *显示当前目录

//（2） git init *将当前目录变成Git可以管理的仓库

*2、添加文件到本地仓库

//(1) 在learnGit目录下创建一个文件readme.txt

//(2) git add readme.txt *添加文件到寄存区

//(3) git commit -m “message description” *将寄存区的文件改动提交到本地仓库

*3、 git status *查看仓库状态

*4、 git diff readme.txt *查看redme.txt 当前副本与历史版本的文件改变

*5、 git log *日志查看

*6、 git log --pretty=online *信息少的日志查看

*7、 git reset --hard HEAD^ *版本回退一次

*8、 git reset --hard 3628164 *版本回退到3628164对应的版本

*9、 git reflog *记录你的每一次命令

*10、 git checkout -- readme.txt *丢弃工作区的修改，恢复到最后一次在暂存区的状态

*11、 git reset HEAD readme.txt *丢弃暂存区的修改，恢复到本地仓库的状态

*场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

*场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

*场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库

*12、git rm readme.txt * 删除暂存区的文件 

*13、 rm readme.txt *删除工作空间的文件

*14、 git remote add origin git仓库网址 *连接本地仓库与远程仓库

*15、 git push -u origin master *把本地库的内容推送到远程 -u只需要第一次推送时添加

*16、 git clone git仓库网址 *克隆远程仓库

*17、 git checkout -b dev *创建并切换到一个dev分支

*18、 git branch dev *创建一个dev分支

*19、 git branch *查看分支

*20、 git merge dev *将当前分支和dev分支合并

*21、 git branch -d dev *删除dev分支

*22、 git merge -no-ff dev *无Fast forward 模式下的合并

*23、 git stash *将工作现场储存下来

*24、 git stash pop *恢复现场，同时把stash内容删除

*25、 git remote -v *查看远程库信息

*26、 git push origin dev *推送dev分支
/*
    master分支是主分支，因此要时刻与远程同步；

    dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

    bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

    feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
*/

27、